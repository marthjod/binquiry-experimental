// Code generated by protoc-gen-go. DO NOT EDIT.
// source: word/word.proto

package word // import "github.com/marthjod/binquiry-experimental/word"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import noun "github.com/marthjod/binquiry-experimental/noun"
import wordtype "github.com/marthjod/binquiry-experimental/wordtype"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Word struct {
	Type                 wordtype.WordType `protobuf:"varint,1,opt,name=type,proto3,enum=wordtype.WordType" json:"type,omitempty"`
	Noun                 *noun.Noun        `protobuf:"bytes,2,opt,name=noun,proto3" json:"noun,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Word) Reset()         { *m = Word{} }
func (m *Word) String() string { return proto.CompactTextString(m) }
func (*Word) ProtoMessage()    {}
func (*Word) Descriptor() ([]byte, []int) {
	return fileDescriptor_word_9d346ad3077117c4, []int{0}
}
func (m *Word) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Word.Unmarshal(m, b)
}
func (m *Word) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Word.Marshal(b, m, deterministic)
}
func (dst *Word) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Word.Merge(dst, src)
}
func (m *Word) XXX_Size() int {
	return xxx_messageInfo_Word.Size(m)
}
func (m *Word) XXX_DiscardUnknown() {
	xxx_messageInfo_Word.DiscardUnknown(m)
}

var xxx_messageInfo_Word proto.InternalMessageInfo

func (m *Word) GetType() wordtype.WordType {
	if m != nil {
		return m.Type
	}
	return wordtype.WordType_Noun
}

func (m *Word) GetNoun() *noun.Noun {
	if m != nil {
		return m.Noun
	}
	return nil
}

type DispatchRequest struct {
	Word                 []byte   `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DispatchRequest) Reset()         { *m = DispatchRequest{} }
func (m *DispatchRequest) String() string { return proto.CompactTextString(m) }
func (*DispatchRequest) ProtoMessage()    {}
func (*DispatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_word_9d346ad3077117c4, []int{1}
}
func (m *DispatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DispatchRequest.Unmarshal(m, b)
}
func (m *DispatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DispatchRequest.Marshal(b, m, deterministic)
}
func (dst *DispatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatchRequest.Merge(dst, src)
}
func (m *DispatchRequest) XXX_Size() int {
	return xxx_messageInfo_DispatchRequest.Size(m)
}
func (m *DispatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DispatchRequest proto.InternalMessageInfo

func (m *DispatchRequest) GetWord() []byte {
	if m != nil {
		return m.Word
	}
	return nil
}

type DispatchResponse struct {
	Word                 *Word    `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DispatchResponse) Reset()         { *m = DispatchResponse{} }
func (m *DispatchResponse) String() string { return proto.CompactTextString(m) }
func (*DispatchResponse) ProtoMessage()    {}
func (*DispatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_word_9d346ad3077117c4, []int{2}
}
func (m *DispatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DispatchResponse.Unmarshal(m, b)
}
func (m *DispatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DispatchResponse.Marshal(b, m, deterministic)
}
func (dst *DispatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatchResponse.Merge(dst, src)
}
func (m *DispatchResponse) XXX_Size() int {
	return xxx_messageInfo_DispatchResponse.Size(m)
}
func (m *DispatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DispatchResponse proto.InternalMessageInfo

func (m *DispatchResponse) GetWord() *Word {
	if m != nil {
		return m.Word
	}
	return nil
}

func init() {
	proto.RegisterType((*Word)(nil), "wordtype.Word")
	proto.RegisterType((*DispatchRequest)(nil), "wordtype.DispatchRequest")
	proto.RegisterType((*DispatchResponse)(nil), "wordtype.DispatchResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DispatcherClient is the client API for Dispatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DispatcherClient interface {
	Dispatch(ctx context.Context, in *DispatchRequest, opts ...grpc.CallOption) (*DispatchResponse, error)
}

type dispatcherClient struct {
	cc *grpc.ClientConn
}

func NewDispatcherClient(cc *grpc.ClientConn) DispatcherClient {
	return &dispatcherClient{cc}
}

func (c *dispatcherClient) Dispatch(ctx context.Context, in *DispatchRequest, opts ...grpc.CallOption) (*DispatchResponse, error) {
	out := new(DispatchResponse)
	err := c.cc.Invoke(ctx, "/wordtype.Dispatcher/Dispatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatcherServer is the server API for Dispatcher service.
type DispatcherServer interface {
	Dispatch(context.Context, *DispatchRequest) (*DispatchResponse, error)
}

func RegisterDispatcherServer(s *grpc.Server, srv DispatcherServer) {
	s.RegisterService(&_Dispatcher_serviceDesc, srv)
}

func _Dispatcher_Dispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).Dispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wordtype.Dispatcher/Dispatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).Dispatch(ctx, req.(*DispatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dispatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wordtype.Dispatcher",
	HandlerType: (*DispatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dispatch",
			Handler:    _Dispatcher_Dispatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "word/word.proto",
}

func init() { proto.RegisterFile("word/word.proto", fileDescriptor_word_9d346ad3077117c4) }

var fileDescriptor_word_9d346ad3077117c4 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0xad, 0x14, 0x59, 0x66, 0x65, 0x2b, 0xb9, 0xb8, 0xf6, 0x20, 0x4b, 0x40, 0xd9, 0x8b,
	0x89, 0x54, 0xf0, 0x07, 0xa8, 0xe7, 0x05, 0x8b, 0x20, 0x78, 0x6b, 0xb7, 0x83, 0x8d, 0xd8, 0x4c,
	0x36, 0x4d, 0xd0, 0xfe, 0x7b, 0x49, 0x4a, 0x5d, 0x15, 0x2f, 0xc3, 0xcb, 0xcc, 0xf7, 0x5e, 0x86,
	0x81, 0xec, 0x83, 0x6c, 0x23, 0x43, 0x11, 0xc6, 0x92, 0x23, 0x36, 0x0b, 0xda, 0x0d, 0x06, 0xf3,
	0xd3, 0x49, 0xc9, 0x49, 0x8c, 0x48, 0x9e, 0x69, 0xf2, 0x5a, 0x86, 0x32, 0x36, 0xf8, 0x06, 0xd2,
	0x67, 0xb2, 0x0d, 0xbb, 0x84, 0x34, 0x60, 0xcb, 0x64, 0x95, 0xac, 0x17, 0x05, 0x13, 0xdf, 0xbe,
	0x30, 0x7d, 0x1a, 0x0c, 0x96, 0x71, 0xce, 0xce, 0x21, 0x0d, 0xee, 0xe5, 0xe1, 0x2a, 0x59, 0xcf,
	0x0b, 0x10, 0x31, 0x6a, 0x43, 0x5e, 0x97, 0xb1, 0xcf, 0x2f, 0x20, 0x7b, 0x50, 0xbd, 0xa9, 0xdc,
	0xb6, 0x2d, 0x71, 0xe7, 0xb1, 0x77, 0x8c, 0x41, 0x1a, 0xd2, 0x62, 0xf4, 0x71, 0x19, 0x35, 0xbf,
	0x85, 0x93, 0x3d, 0xd6, 0x1b, 0xd2, 0x3d, 0x32, 0xfe, 0x83, 0x9b, 0x17, 0x8b, 0xdf, 0x2b, 0x8c,
	0xbe, 0xe2, 0x11, 0x60, 0xf2, 0xa1, 0x65, 0xf7, 0x30, 0x9b, 0x5e, 0xec, 0x6c, 0xcf, 0xff, 0x59,
	0x20, 0xcf, 0xff, 0x1b, 0x8d, 0x9f, 0xf2, 0x83, 0xbb, 0xeb, 0x17, 0xf1, 0xaa, 0x5c, 0xeb, 0x6b,
	0xb1, 0xa5, 0x4e, 0x76, 0x95, 0x75, 0xed, 0x1b, 0x35, 0xb2, 0x56, 0x7a, 0xe7, 0x95, 0x1d, 0xae,
	0xf0, 0xd3, 0xa0, 0x55, 0x1d, 0x6a, 0x57, 0xbd, 0xc7, 0x73, 0xd6, 0x47, 0xf1, 0x74, 0x37, 0x5f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xfc, 0x83, 0x94, 0x81, 0x01, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: noun.proto

package noun

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ParseRequest struct {
	Word                 []byte   `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseRequest) Reset()         { *m = ParseRequest{} }
func (m *ParseRequest) String() string { return proto.CompactTextString(m) }
func (*ParseRequest) ProtoMessage()    {}
func (*ParseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_noun_ccf72480c4e97038, []int{0}
}
func (m *ParseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParseRequest.Unmarshal(m, b)
}
func (m *ParseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParseRequest.Marshal(b, m, deterministic)
}
func (dst *ParseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseRequest.Merge(dst, src)
}
func (m *ParseRequest) XXX_Size() int {
	return xxx_messageInfo_ParseRequest.Size(m)
}
func (m *ParseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParseRequest proto.InternalMessageInfo

func (m *ParseRequest) GetWord() []byte {
	if m != nil {
		return m.Word
	}
	return nil
}

type ParseResponse struct {
	Json                 []byte   `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseResponse) Reset()         { *m = ParseResponse{} }
func (m *ParseResponse) String() string { return proto.CompactTextString(m) }
func (*ParseResponse) ProtoMessage()    {}
func (*ParseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_noun_ccf72480c4e97038, []int{1}
}
func (m *ParseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParseResponse.Unmarshal(m, b)
}
func (m *ParseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParseResponse.Marshal(b, m, deterministic)
}
func (dst *ParseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseResponse.Merge(dst, src)
}
func (m *ParseResponse) XXX_Size() int {
	return xxx_messageInfo_ParseResponse.Size(m)
}
func (m *ParseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ParseResponse proto.InternalMessageInfo

func (m *ParseResponse) GetJson() []byte {
	if m != nil {
		return m.Json
	}
	return nil
}

func init() {
	proto.RegisterType((*ParseRequest)(nil), "ParseRequest")
	proto.RegisterType((*ParseResponse)(nil), "ParseResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NounParserClient is the client API for NounParser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NounParserClient interface {
	Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResponse, error)
}

type nounParserClient struct {
	cc *grpc.ClientConn
}

func NewNounParserClient(cc *grpc.ClientConn) NounParserClient {
	return &nounParserClient{cc}
}

func (c *nounParserClient) Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResponse, error) {
	out := new(ParseResponse)
	err := c.cc.Invoke(ctx, "/NounParser/Parse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NounParserServer is the server API for NounParser service.
type NounParserServer interface {
	Parse(context.Context, *ParseRequest) (*ParseResponse, error)
}

func RegisterNounParserServer(s *grpc.Server, srv NounParserServer) {
	s.RegisterService(&_NounParser_serviceDesc, srv)
}

func _NounParser_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NounParserServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NounParser/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NounParserServer).Parse(ctx, req.(*ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NounParser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NounParser",
	HandlerType: (*NounParserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Parse",
			Handler:    _NounParser_Parse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noun.proto",
}

func init() { proto.RegisterFile("noun.proto", fileDescriptor_noun_ccf72480c4e97038) }

var fileDescriptor_noun_ccf72480c4e97038 = []byte{
	// 125 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0xcb, 0x2f, 0xcd,
	0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x52, 0xe2, 0xe2, 0x09, 0x48, 0x2c, 0x2a, 0x4e, 0x0d,
	0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0x29, 0xcf, 0x2f, 0x4a, 0x91, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x09, 0x02, 0xb3, 0x95, 0x94, 0xb9, 0x78, 0xa1, 0x6a, 0x8a, 0x0b, 0xf2,
	0xf3, 0x8a, 0x53, 0x41, 0x8a, 0xb2, 0x8a, 0xf3, 0xf3, 0x60, 0x8a, 0x40, 0x6c, 0x23, 0x33, 0x2e,
	0x2e, 0xbf, 0xfc, 0xd2, 0x3c, 0xb0, 0xc2, 0x22, 0x21, 0x0d, 0x2e, 0x56, 0x30, 0x4b, 0x88, 0x57,
	0x0f, 0xd9, 0x78, 0x29, 0x3e, 0x3d, 0x14, 0x93, 0x94, 0x18, 0x92, 0xd8, 0xc0, 0xee, 0x30, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x86, 0x9e, 0xe9, 0xb4, 0x95, 0x00, 0x00, 0x00,
}
